/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.kerb4j.server.spring.webflux;

import com.kerb4j.common.util.Constants;
import com.kerb4j.common.util.base64.Base64Codec;
import com.kerb4j.server.spring.SpnegoRequestToken;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.ReactiveSecurityContextHolder;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;
import org.springframework.security.web.server.authentication.AuthenticationWebFilter;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;

/**
 * Reactive WebFlux equivalent of {@link com.kerb4j.server.spring.SpnegoAuthenticationProcessingFilter}.
 * 
 * <p>Parses the SPNEGO authentication Header, which was generated by the browser
 * and creates a {@link SpnegoRequestToken} out of it. It will then
 * call the {@link ReactiveAuthenticationManager}.</p>
 *
 * @author Mike Wiesner (original SpnegoAuthenticationProcessingFilter)
 * @author GitHub Copilot (WebFlux adaptation)
 * @see com.kerb4j.server.spring.SpnegoAuthenticationProcessingFilter
 * @since 1.0
 */
public class SpnegoServerAuthenticationConverter implements ServerAuthenticationConverter {

    private static final Log LOG = LogFactory.getLog(SpnegoServerAuthenticationConverter.class);

    private boolean supportBasicAuthentication = true;
    private boolean skipIfAlreadyAuthenticated = true;

    /**
     * Instantiates a new SPNEGO authentication converter.
     */
    public SpnegoServerAuthenticationConverter() {
        this(true);
    }

    /**
     * Instantiates a new SPNEGO authentication converter with basic authentication support option.
     *
     * @param supportBasicAuthentication whether to support basic authentication fallback
     */
    public SpnegoServerAuthenticationConverter(boolean supportBasicAuthentication) {
        this.supportBasicAuthentication = supportBasicAuthentication;
    }

    @Override
    public Mono<Authentication> convert(ServerWebExchange exchange) {
        // Check if already authenticated and skip if configured to do so
        if (skipIfAlreadyAuthenticated) {
            return ReactiveSecurityContextHolder.getContext()
                    .map(SecurityContext::getAuthentication)
                    .filter(auth -> auth != null && auth.isAuthenticated() && 
                            !(auth instanceof AnonymousAuthenticationToken))
                    .flatMap(auth -> Mono.<Authentication>empty()) // Skip processing if already authenticated
                    .switchIfEmpty(Mono.defer(() -> processAuthenticationHeader(exchange)));
        } else {
            return processAuthenticationHeader(exchange);
        }
    }

    private Mono<Authentication> processAuthenticationHeader(ServerWebExchange exchange) {
        String header = exchange.getRequest().getHeaders().getFirst(Constants.AUTHZ_HEADER);

        if (header == null) {
            return Mono.empty();
        }

        if (header.startsWith(Constants.NEGOTIATE_HEADER)) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Received Negotiate Header for request " + exchange.getRequest().getURI() + ": " + header);
            }
            
            String base64Token = header.substring(Constants.NEGOTIATE_HEADER.length());
            byte[] kerberosTicket = Base64Codec.decode(base64Token);
            return Mono.just(new SpnegoRequestToken(kerberosTicket));
            
        } else if (supportBasicAuthentication && header.startsWith(Constants.BASIC_HEADER)) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Received Basic Header for request " + exchange.getRequest().getURI() + ": " + header);
            }
            
            String base64Token = header.substring(Constants.BASIC_HEADER.length());
            String token = new String(Base64Codec.decode(base64Token), StandardCharsets.UTF_8);

            String username = "";
            String password = "";
            int delimiter = token.indexOf(":");

            if (delimiter != -1) {
                username = token.substring(0, delimiter);
                password = token.substring(delimiter + 1);
            }

            return Mono.just(new UsernamePasswordAuthenticationToken(username, password));
        }

        return Mono.empty();
    }

    /**
     * Sets whether to support basic authentication as fallback.
     *
     * @param supportBasicAuthentication whether to support basic authentication
     */
    public void setSupportBasicAuthentication(boolean supportBasicAuthentication) {
        this.supportBasicAuthentication = supportBasicAuthentication;
    }

    /**
     * Sets whether to skip authentication if already authenticated.
     *
     * @param skipIfAlreadyAuthenticated whether to skip if already authenticated
     */
    public void setSkipIfAlreadyAuthenticated(boolean skipIfAlreadyAuthenticated) {
        this.skipIfAlreadyAuthenticated = skipIfAlreadyAuthenticated;
    }
}